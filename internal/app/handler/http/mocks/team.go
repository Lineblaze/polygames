// Code generated by MockGen. DO NOT EDIT.
// Source: team.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "polygames/internal/app/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTeamService is a mock of TeamService interface.
type MockTeamService struct {
	ctrl     *gomock.Controller
	recorder *MockTeamServiceMockRecorder
}

// MockTeamServiceMockRecorder is the mock recorder for MockTeamService.
type MockTeamServiceMockRecorder struct {
	mock *MockTeamService
}

// NewMockTeamService creates a new mock instance.
func NewMockTeamService(ctrl *gomock.Controller) *MockTeamService {
	mock := &MockTeamService{ctrl: ctrl}
	mock.recorder = &MockTeamServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamService) EXPECT() *MockTeamServiceMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method.
func (m *MockTeamService) CreateTeam(ctx context.Context, team *domain.Team) (*domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", ctx, team)
	ret0, _ := ret[0].(*domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockTeamServiceMockRecorder) CreateTeam(ctx, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockTeamService)(nil).CreateTeam), ctx, team)
}

// DisableTeam mocks base method.
func (m *MockTeamService) DisableTeam(ctx context.Context, teamID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableTeam", ctx, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableTeam indicates an expected call of DisableTeam.
func (mr *MockTeamServiceMockRecorder) DisableTeam(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTeam", reflect.TypeOf((*MockTeamService)(nil).DisableTeam), ctx, teamID)
}

// EnableTeam mocks base method.
func (m *MockTeamService) EnableTeam(ctx context.Context, teamID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTeam", ctx, teamID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableTeam indicates an expected call of EnableTeam.
func (mr *MockTeamServiceMockRecorder) EnableTeam(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTeam", reflect.TypeOf((*MockTeamService)(nil).EnableTeam), ctx, teamID)
}

// GetTeam mocks base method.
func (m *MockTeamService) GetTeam(ctx context.Context, id int32) (*domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, id)
	ret0, _ := ret[0].(*domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamServiceMockRecorder) GetTeam(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamService)(nil).GetTeam), ctx, id)
}

// GetTeamImage mocks base method.
func (m *MockTeamService) GetTeamImage(ctx context.Context, teamID int32) (*domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamImage", ctx, teamID)
	ret0, _ := ret[0].(*domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamImage indicates an expected call of GetTeamImage.
func (mr *MockTeamServiceMockRecorder) GetTeamImage(ctx, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamImage", reflect.TypeOf((*MockTeamService)(nil).GetTeamImage), ctx, teamID)
}

// GetTeams mocks base method.
func (m *MockTeamService) GetTeams(ctx context.Context) ([]domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx)
	ret0, _ := ret[0].([]domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockTeamServiceMockRecorder) GetTeams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockTeamService)(nil).GetTeams), ctx)
}

// SetTeamImage mocks base method.
func (m *MockTeamService) SetTeamImage(ctx context.Context, teamID int32, img []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTeamImage", ctx, teamID, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTeamImage indicates an expected call of SetTeamImage.
func (mr *MockTeamServiceMockRecorder) SetTeamImage(ctx, teamID, img interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTeamImage", reflect.TypeOf((*MockTeamService)(nil).SetTeamImage), ctx, teamID, img)
}

// UpdateTeam mocks base method.
func (m *MockTeamService) UpdateTeam(ctx context.Context, team *domain.Team) (*domain.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", ctx, team)
	ret0, _ := ret[0].(*domain.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockTeamServiceMockRecorder) UpdateTeam(ctx, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockTeamService)(nil).UpdateTeam), ctx, team)
}
